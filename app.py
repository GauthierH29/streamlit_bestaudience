import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from st_files_connection import FilesConnection


# Create connection object and retrieve file contents.
# Specify input format is a csv and to cache the result for 600 seconds.
conn = st.experimental_connection('gcs', type=FilesConnection)
df = conn.read("bucket-test-bestaudience/data_base_le_wagon.csv", input_format="csv", ttl=600, sep=";")


# Barre de navigation lat√©rale
st.sidebar.title("Best Audience")

# Personnalisation de la mise en page
st.sidebar.markdown("---")

# Options de navigation
pages = ["Profil", "Data Analysis", "Product Recomendation", "Audience Recomendation"]
selected_page = st.sidebar.radio("Navigation", pages)

# Cr√©ation de la session pour stocker les donn√©es
session_state = st.session_state

# Affichage des diff√©rentes pages
if selected_page == "Profil":
    # Page Profil
    st.title("Profil")

    # Utilisation de la grille CSS
    col1, col2 = st.columns([1, 1])  # Division en 2 colonnes de largeur √©gale

    # Colonne de gauche : √âcrivez votre nom
    with col1:
        st.subheader("Enter your Name")
        name = st.text_input("Name")
        if name:
            st.markdown(f"<h1>Hello {name} !</h1>", unsafe_allow_html=True)
            st.success("You can drop your CSV file right for the best comercial analysis !")
        else:
            st.warning("Please enter your name.")

    # Colonne de droite : D√©posez le fichier
    with col2:
        st.subheader("File Uploader")
        csv_file = st.file_uploader("Upload a CSV", type="csv")
        if csv_file is not None:
            # Sauvegarde du fichier charg√© dans la session
            session_state['data'] = pd.read_csv(csv_file)
            st.write("File uploaded successfully !")
        else:
            session_state['data'] = df
# Code pour la page Profil ici

elif selected_page == "Data Analysis":
    plt.style.use('seaborn-whitegrid')

    # Titre de la page
    st.title("Data Analysis")
    row0_spacer1, row0_1, row0_spacer2, row0_spacer3 = st.columns((.1, 2.3, .1, .1))
    row3_spacer1, row3_1, row3_spacer2 = st.columns((.1, 3.2, .1))
    #intro
    with row3_1:
        st.markdown("Vous trouverez ici un aper√ßu rapide du tableau de donn√©es fourni dans l'onglet Analyse de profil. Il est toujours important de comprendre vos donn√©es avant de vous lancer dans l'apprentissage automatique ou toute autre analyse.üòâ")

    # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
    if 'data' in session_state:
        data = session_state['data']

        # Affichage des donn√©es
        st.header("Aper√ßu des donn√©es")
        with row3_1:
            st.markdown("")
        see_data = st.expander('Vous pouvez cliquer ici pour voir les donn√©es brutes üëâ')
        with see_data:
            st.dataframe(data=data.reset_index(drop=True))
        st.text('')

        # Analyse exploratoire des donn√©es
        st.header("Analyse exploratoire des donn√©es")

        # Statistiques descriptives
        st.subheader("Statistiques descriptives")
        st.write(data.describe())

        # Visualisation des donn√©es
        st.header("Visualisation des donn√©es")

        # Choix du graphique √† afficher
        selected_chart = st.selectbox("S√©lectionnez le type de graphique :", ["Graphique - Date de naissance par date", "Diagramme circulaire des genres", "Diagramme Ventes par produit", "Diagramme CA par date", "Diagramme r√©partition des sous cat√©gories", "Tendances de cr√©ation de compte"])

        if selected_chart == "Graphique - Date de naissance par date":
            # Exemple de visualisation : Histogramme
            st.subheader("Histogramme des valeurs de la colonne 'Age'")
            data['Client - Date de Naissance'] = pd.to_datetime(data['Client - Date de Naissance'], errors='coerce')
            fig, ax = plt.subplots(facecolor='white')
            ax.hist(data['Client - Date de Naissance'].dt.year, color='steelblue')
            st.pyplot(fig)

        elif selected_chart == "Diagramme circulaire des genres":
            # Exemple de visualisation : Diagramme circulaire
            st.subheader("Diagramme circulaire des cat√©gories de la colonne 'Sexe'")
            counts = data['Client - Civilit√©'].value_counts()
            fig, ax = plt.subplots(facecolor='white')
            ax.pie(counts, labels=counts.index, autopct='%1.1f%%', colors=['#ff9999', '#66b3ff'])
            ax.axis('equal')  # Pour s'assurer que le diagramme est circulaire
            st.pyplot(fig)

        elif selected_chart == "Diagramme Ventes par produit":
            # Exemple de visualisation : Diagramme en barres
            fig, ax = plt.subplots()
            sns.countplot(data=data, x='Produit - Cat√©gorie')
            plt.xlabel('Produit')
            plt.ylabel('Nombre de ventes')
            plt.title("R√©partition des ventes par produit")
            plt.xticks(rotation=45)
            st.pyplot(fig)

        elif selected_chart == "Diagramme CA par date":
            data['DAY'] = pd.to_datetime(data['DAY'])

            # Extraire le mois √† partir de la colonne 'Date'
            data['Mois'] = data['DAY'].dt.to_period('M')
            data['CA HT'] = data['CA HT'].str.replace(',', '.').astype(float)
            ca_par_date = data.groupby('Mois')['CA HT'].sum().reset_index()

            fig, ax = plt.subplots()
            sns.barplot(data=ca_par_date, x='Mois', y='CA HT')
            plt.xlabel('Date')
            plt.ylabel('Chiffre d\'affaires')
            plt.title('Chiffre d\'affaires par date')
            plt.xticks(rotation=45)
            st.pyplot(fig)

        elif selected_chart == "Diagramme r√©partition des sous cat√©gories":
            fig, ax = plt.subplots()
            commande_type_counts = df['Produit - Forme'].value_counts()
            commande_type_counts.plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8))
            plt.title("R√©partition des Cat√©gorie")
            plt.ylabel("")
            st.pyplot(fig)

        elif selected_chart == "Tendances de cr√©ation de compte":
            df['Client - Mois de Cr√©ation'] = pd.to_datetime(df['Client - Mois de Cr√©ation'], format='%Y%m')
            df['Client - Mois de la premi√®re commande'] = pd.to_datetime(df['Client - Mois de la premi√®re commande'], format='%Y%m')
            df['Client - Mois de la derni√®re commande'] = pd.to_datetime(df['Client - Mois de la derni√®re commande'], format='%Y%m')

            fig, ax = plt.subplots()
            df['Client - Mois de Cr√©ation'].dt.to_period('M').value_counts().sort_index().plot(kind='line', figsize=(10, 6))
            plt.title("Tendances de cr√©ation de compte")
            plt.xlabel("Mois")
            plt.ylabel("Nombre de comptes cr√©√©s")
            st.pyplot(fig)

    else:
        st.warning("Veuillez charger un fichier CSV depuis la page Profil.")


# Code pour la page Data Analysis ici

elif selected_page == "Product Recomendation":
    # Page Product Recommendation
    st.title("Product Recomendation")

    # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
    if 'data' in session_state:
        data = session_state['data']

        # S√©lection des clients
        st.subheader("S√©lectionnez les clients")

        # Liste des clients
        client_list = data["Client - ID"].unique().tolist()

        # S√©lection des clients
        selected_clients = st.multiselect("Clients", options=client_list, default=[], help="Select clients")

        # V√©rification si des clients ont √©t√© s√©lectionn√©s
        if len(selected_clients) > 0:
            for client_id in selected_clients:
                # Obtention des clients similaires pour chaque client s√©lectionn√©
                # √† compl√©ter
                similar_customers = data['Client - ID']

                # Obtention des produits achet√©s pour chaque client s√©lectionn√©
                # √† compl√©ter
                products_purchased = data['Produit - Forme']

                # Affichage des r√©sultats
                st.write(f"Client ID: {client_id}")
                st.write("Top 10 clients similaires:")
                st.table(similar_customers[:10] )
                st.write("Top 5 produits achet√©s:")
                st.table(products_purchased[:5])
        else:
            st.write("Aucun client s√©lectionn√©.")

    else:
        st.warning("Veuillez charger un fichier CSV depuis la page Profil.")
# Code pour la page Product Recommendation ici

elif selected_page == "Audience Recomendation":
    # Page Audience Recommendation
    st.title("Audience Recomendation")

    # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
    if 'data' in session_state:
        data = session_state['data']

        # Affichage du DataFrame
        st.subheader("Donn√©es brutes")
        st.write(data)

        # Description statistique du DataFrame
        st.subheader("Description statistique")
        st.write(data.describe())

        # Visualisation des clusters
        st.subheader("Visualisation des clusters")

        # S√©lection des num√©ros de clusters
        cluster_numbers = [1,2,3,7,8,13]

        if len(cluster_numbers) > 0:
            # Filtrage des donn√©es pour les clusters s√©lectionn√©s
            filtered_data = data

            # Affichage du DataFrame filtr√©
            st.write(filtered_data)

            # Visualisation des clusters
            # √† compl√©ter
            #visualize_clusters(filtered_data, cluster_numbers)
        else:
            st.write("Aucun cluster s√©lectionn√©.")

    else:
        st.warning("Veuillez charger un fichier CSV depuis la page Profil.")
# Code pour la page Audience Recommendation ici

# Personnalisation de la mise en page
st.sidebar.markdown("---")

# Bouton Contact
if st.sidebar.button("Contact"):
    st.title("Contact")

    # Formulaire de contact
    st.subheader("Formulaire de contact")

    # Champ Nom
    name = st.text_input("Nom")

    # Champ Email
    email = st.text_input("Email")

    # Champ Message
    message = st.text_area("Message")

    # Bouton d'envoi du formulaire
    if st.button("Envoyer"):
        # Validation et traitement des donn√©es du formulaire
        if not name or not email or not message:
            st.error("Veuillez remplir tous les champs du formulaire.")
        else:
            # Envoi du message ou traitement des donn√©es
            # (vous pouvez ajouter ici le code pour envoyer le message par e-mail ou le traiter d'une autre mani√®re)
            st.success("Votre message a √©t√© envoy√© avec succ√®s.")

    # Liens vers des r√©seaux sociaux
    st.subheader("R√©seaux sociaux")
    st.write("Suivez-nous sur git hub pour rester inform√©(e) :")
    st.write("- [GitHub_Gauthier](https://github.com/GauthierH29)")
    st.write("- [GitHub_Derhen](https://github.com/Tshelb)")
    st.write("- [GitHub_Samih](https://github.com/SamihBACHNOU)")

    # Noms des fondateurs
    st.subheader("Fondateurs")
    st.write("Les fondateurs du site sont :")
    st.write("- Gauthier HAICAULT")
    st.write("- Derhen BOURGEAIS")
    st.write("- Samih BACHNOU")
