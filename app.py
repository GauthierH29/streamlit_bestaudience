import streamlit as st
import requests
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import json
import time
from dataviz import visualize_clusters,visualize_cluster_products
import requests

from sklearn.preprocessing import MinMaxScaler
from st_files_connection import FilesConnection

#####################################################API CALL#######################################################

# Create connection object and retrieve file contents.
# Specify input format is a csv and to cache the result for 600 seconds.
conn = st.experimental_connection('gcs', type=FilesConnection)
df = conn.read("bucket-test-bestaudience/data_base_le_wagon.csv", input_format="csv", ttl=600, sep=";")
df_analyse_basics = conn.read("bucket-test-bestaudience/kmeans_basics_analyse.csv", input_format="csv", ttl=600)
df_analyse_pca = conn.read("bucket-test-bestaudience/kmeans_pca_analyse.csv", input_format="csv", ttl=600)

#####################################################API CALL#######################################################

# Fonction pour faire une requ√™te GET √† l'API de pr√©diction K-means
def get_kmeans_prediction(nb_k):
    api_url = "http://127.0.0.1:8000/kmean/predict"
    response = requests.get(api_url, params={"nb_k": nb_k})
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Fonction pour faire une requ√™te GET √† l'API de pr√©diction K-means avec PCA
def get_kmeans_pca_prediction(nb_k):
    api_url = "http://127.0.0.1:8000/kmean_pca/predict"
    response = requests.get(api_url, params={"nb_k": nb_k})
    if response.status_code == 200:
        return response.json()
    else:
        return None

# Fonction pour faire une requ√™te GET √† l'API de recommandation de produits
def get_product_recommendation(user_ids, top_n_similar, top_n_products):
    api_url = "http://127.0.0.1:8000/recommend/predict"
    response = requests.get(api_url, params={"user_ids": user_ids, "top_n_similar": top_n_similar, "top_n_products": top_n_products})
    if response.status_code == 200:
        return response.json()
    else:
        return None

#####################################################API CALL#######################################################

# Barre de navigation lat√©rale
#st.sidebar.title("Best Audience")
st.sidebar.markdown('<h1 style="color: #ff6555ff;">Best Audience</h1>', unsafe_allow_html=True)

# Personnalisation de la mise en page
st.sidebar.markdown("---")

# Options de navigation
pages = ["Profil - Import", "Data Analyses", "Recommandation Produit", "Segmentation Audience"]
selected_page = st.sidebar.radio("Navigation", pages)

# Cr√©ation de la session pour stocker les donn√©es
session_state = st.session_state

# Affichage des diff√©rentes pages
if selected_page == "Profil - Import":
    # Page Profil
    #st.title("Profil")
    st.markdown("<h1 style='color: #ff6555ff;'>Profil - Import</h1>", unsafe_allow_html=True)

    # Utilisation de la grille CSS
    col1, col2 = st.columns([1, 1])  # Division en 2 colonnes de largeur √©gale

    # Colonne de gauche : √âcrivez votre nom
    with col1:
        st.subheader("Entrez votre nom")
        name = st.text_input("Nom")
        if name:
            st.markdown(f"<h1>Bonjour {name} !</h1>", unsafe_allow_html=True)
            st.success("Bienvenue sur Best Audience !")
            st.write("Nous proposons des outils d'analyse commerciale puissants pour vous aider √† prendre des d√©cisions bas√©es sur les donn√©es.")
        else:
            st.warning("Veuillez entrer votre nom.")
            st.empty()  # Supprime les messages pr√©c√©dents

    # Colonne de droite : D√©posez le fichier
    with col2:
        st.subheader("T√©l√©chargez un fichier CSV")
        st.write("T√©l√©chargez un fichier CSV pour commencer")
        st.write("Nos algorithmes d'analyse r√©v√©leront des informations √† partir de vos donn√©es.")
        csv_file = st.file_uploader("T√©l√©charger un fichier CSV", type="csv")
        if csv_file is not None:
            st.success("Fichier t√©l√©charg√© avec succ√®s !")
            st.write("Nous traiterons vos donn√©es et g√©n√©rerons des visualisations pertinentes.")
        else:
            session_state['data'] = df
            session_state['df_analyse_basics']=df_analyse_basics
            session_state['df_analyse_pca']=df_analyse_pca

    # Bouton de validation
    if st.button("D√©marrer l'analyse"):
        with st.spinner("Vos donn√©es sont en cours de traitement..."):
            time.sleep(2)  # Simulation d'un traitement en cours
            st.success("Analyse termin√©e !")
            st.write("Vos donn√©es ont √©t√© pr√©trait√©es et analys√©es.")
            st.write("Nous vous fournirons des informations adapt√©es √† vos enjeux business.")
            st.empty()  # Supprime les messages pr√©c√©dents

# Code pour la page Profil ici

elif selected_page == "Data Analyses":
    plt.style.use('seaborn-whitegrid')

    # Titre de la page
    #st.title("Data Analysis")
    st.markdown("<h1 style='color: #ff6555ff;'>Data Analyses</h1>", unsafe_allow_html=True)
    row0_spacer1, row0_1, row0_spacer2, row0_spacer3 = st.columns((.1, 2.3, .1, .1))
    row3_spacer1, row3_1, row3_spacer2 = st.columns((.1, 3.2, .1))
    #intro
    with row3_1:
        st.markdown("Vous trouverez ici un aper√ßu rapide du tableau de donn√©es fourni dans l'onglet Analyse de profil. Il est toujours important de comprendre vos donn√©es avant de vous lancer dans l'apprentissage automatique ou toute autre analyse.üòâ")

    # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
    if 'data' in session_state:
        data = session_state['data']

        # Affichage des donn√©es
        st.header("Aper√ßu des donn√©es")
        with row3_1:
            st.markdown("")
        see_data = st.expander('Vous pouvez cliquer ici pour voir les donn√©es brutes üëâ')
        with see_data:
            st.dataframe(data=data.reset_index(drop=True))
        st.text('')

        # Analyse exploratoire des donn√©es
        st.header("Analyse exploratoire des donn√©es")

        # Statistiques descriptives
        st.subheader("Statistiques descriptives")
        st.write(data.describe())

        # Visualisation des donn√©es
        st.header("Visualisation des donn√©es")

        # Choix du graphique √† afficher
        selected_chart = st.selectbox("S√©lectionnez le type de graphique :", ["Graphique - Date de naissance par date", "Diagramme circulaire des genres", "Diagramme Ventes par produit", "Diagramme CA par date", "Diagramme r√©partition des sous cat√©gories", "Tendances de cr√©ation de compte"])

        if selected_chart == "Graphique - Date de naissance par date":
            # Exemple de visualisation : Histogramme
            st.subheader("Histogramme des valeurs de la colonne 'Age'")
            data['Client - Date de Naissance'] = pd.to_datetime(data['Client - Date de Naissance'], errors='coerce')
            fig, ax = plt.subplots(facecolor='white')
            ax.hist(data['Client - Date de Naissance'].dt.year, color='steelblue')
            st.pyplot(fig)

        elif selected_chart == "Diagramme circulaire des genres":
            # Exemple de visualisation : Diagramme circulaire
            st.subheader("Diagramme circulaire des cat√©gories de la colonne 'Sexe'")
            counts = data['Client - Civilit√©'].value_counts()
            fig, ax = plt.subplots(facecolor='white')
            ax.pie(counts, labels=counts.index, autopct='%1.1f%%', colors=['#ff9999', '#66b3ff'])
            ax.axis('equal')  # Pour s'assurer que le diagramme est circulaire
            st.pyplot(fig)

        elif selected_chart == "Diagramme Ventes par produit":
            # Exemple de visualisation : Diagramme en barres
            fig, ax = plt.subplots()
            sns.countplot(data=data, x='Produit - Cat√©gorie')
            plt.xlabel('Produit')
            plt.ylabel('Nombre de ventes')
            plt.title("R√©partition des ventes par produit")
            plt.xticks(rotation=45)
            st.pyplot(fig)

        elif selected_chart == "Diagramme CA par date":
            data['DAY'] = pd.to_datetime(data['DAY'])

            # Extraire le mois √† partir de la colonne 'Date'
            data['Mois'] = data['DAY'].dt.to_period('M')
            data['CA HT'] = data['CA HT'].str.replace(',', '.').astype(float)
            ca_par_date = data.groupby('Mois')['CA HT'].sum().reset_index()

            fig, ax = plt.subplots()
            sns.barplot(data=ca_par_date, x='Mois', y='CA HT')
            plt.xlabel('Date')
            plt.ylabel('Chiffre d\'affaires')
            plt.title('Chiffre d\'affaires par date')
            plt.xticks(rotation=45)
            st.pyplot(fig)

        elif selected_chart == "Diagramme r√©partition des sous cat√©gories":
            fig, ax = plt.subplots()
            commande_type_counts = data['Produit - Forme'].value_counts()
            commande_type_counts.plot(kind='pie', autopct='%1.1f%%', figsize=(8, 8))
            plt.title("R√©partition des Cat√©gorie")
            plt.ylabel("")
            st.pyplot(fig)

        elif selected_chart == "Tendances de cr√©ation de compte":
            df['Client - Mois de Cr√©ation'] = pd.to_datetime(df['Client - Mois de Cr√©ation'], format='%Y%m')
            df['Client - Mois de la premi√®re commande'] = pd.to_datetime(df['Client - Mois de la premi√®re commande'], format='%Y%m')
            df['Client - Mois de la derni√®re commande'] = pd.to_datetime(df['Client - Mois de la derni√®re commande'], format='%Y%m')

            fig, ax = plt.subplots()
            df['Client - Mois de Cr√©ation'].dt.to_period('M').value_counts().sort_index().plot(kind='line', figsize=(10, 6))
            plt.title("Tendances de cr√©ation de compte")
            plt.xlabel("Mois")
            plt.ylabel("Nombre de comptes cr√©√©s")
            st.pyplot(fig)

    else:
        st.warning("Veuillez charger un fichier CSV depuis la page Profil.")

# Code pour la page Data Analysis ici

elif selected_page == "Recommandation Produit":
    # Page Product Recommendation
    #st.title("Product Recomendation")
    st.markdown("<h1 style='color: #ff6555ff;'>Recommandation Produit</h1>", unsafe_allow_html=True)

    if 'data' in session_state:
        data = session_state['data']

        # S√©lection des clients
        st.subheader("S√©lectionnez les clients")

        # Liste des clients
        client_list = data["Client - ID"].unique().tolist()

        # S√©lection des clients
        selected_clients=st.text_input("Entrez les ID clients sous le format suivant : | s√©par√©s par une virgule | (ex: CLT91838,CLT32918,CLT94868,CLT20208,CLT81083) pour lesquels vous souhaitez avoir une recommandation produit")

        # V√©rification si des clients ont √©t√© s√©lectionn√©s
        if len(selected_clients) > 0:

            # S√©lection du nombre de clients similaires et de produits recommand√©s
            top_n_similar = st.number_input("Choix du nombre de clients similaires sur lequel vous souhaitez baser votre recommandation :", min_value=1, value=10, step=1)
            top_n_products = st.number_input("Choix du nombre de produits recommand√©s par clients similaires s√©lectionn√©s sur lequel vous souhaitez vous baser :", min_value=1, value=5, step=1)

            selected_chart = st.selectbox("S√©lectionnez un client pour voir  :", selected_clients.split(","))

            # Recommandation de produits
            product_recommendation = get_product_recommendation(selected_clients, top_n_similar, top_n_products)
            if product_recommendation is not None:
                df_recommendations = {}
                for client_id, recommendations in product_recommendation.items():
                    # Cr√©ation du DataFrame pour le tableau
                    df_recommendations[str(client_id)] = pd.DataFrame(recommendations, columns=["Produit", "Score"])

                # Affichage du tableau
                if selected_chart in df_recommendations.keys() :
                    st.write(df_recommendations[str(client_id)])

                #show_recommendations = st.checkbox("Afficher la liste compl√®te de recommandations")
                #if show_recommendations:
                    #st.write(df_recommendations)


        else:
            st.write("Aucun client s√©lectionn√©.")
    else:
        st.warning("Veuillez charger un fichier CSV depuis la page Profil.")


elif selected_page == "Segmentation Audience":
    # Page Audience Recommendation
    #st.title("Audience Recomendation")
    st.markdown("<h1 style='color: #ff6555ff;'>Segmentation Audience</h1>", unsafe_allow_html=True)
    pages_audience = ["pca + kmeans","kmeans"]
    selected_page_audience = st.radio("Mod√®les", pages_audience)

    if selected_page_audience == "kmeans":
        st.markdown('___')
        st.subheader('Mod√®le Kmeans')
        nb_k = st.slider('Combien de clusters ?', 1, 30)
        labels=get_kmeans_prediction(nb_k)

        # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
        if 'data' in session_state:
            data = session_state['data']
            if labels is not None:
                #labels = labels.rename(columns={'labels': 'Cluster Label'})
                labels = pd.DataFrame.from_dict(labels).rename(columns={'labels': 'Cluster Label'})
                df_def = pd.concat([df_analyse_basics,labels],axis=1)

                # Affichage des donn√©es
                st.subheader("Aper√ßu des donn√©es lab√©lis√©es")
                with st.expander("Cliquez pour voir :"):
                    st.write(df_def)

                # Description statistique du DataFrame
                st.subheader("Description statistique")
                with st.expander("Cliquez pour voir :"):
                    st.write(df_def.describe())

                # Visualisation des clusters
                st.subheader("Visualisation des clusters")

                # S√©lection des num√©ros de clusters
                cluster_numbers = sorted(labels['Cluster Label'].unique())
                for i in range(len(cluster_numbers)):
                    cluster_numbers[i]+=1

                # Affichez les cases √† cocher
                cluster_numbers=st.multiselect("Selectionnez les clusters",cluster_numbers)

                with st.expander("Cliquez pour voir les graphiques :"):
                    if len(cluster_numbers) > 0:
                        # Filtrage des donn√©es pour les clusters s√©lectionn√©s
                        filtered_data = data

                        # Visualisation des clusters
                        # Test m√©thode avec les clusters choisis
                        visualize_clusters(df_def,cluster_numbers)
                        #visualize_clusters(filtered_data, cluster_numbers)
                    else:
                        st.write("Aucun cluster s√©lectionn√©.")
            else:
                st.warning("Veuillez lancer l'api.")

        else:
            st.warning("Veuillez charger un fichier CSV depuis la page Profil.")

    elif selected_page_audience == "pca + kmeans":
        st.markdown('___')
        st.subheader('Mod√®le pca + kmeans')
        nb_k = st.slider('Combien de clusters ?', 1, 30)
        labels=get_kmeans_pca_prediction(nb_k)

        # V√©rification si des donn√©es ont √©t√© charg√©es dans la session
        if 'data' in session_state:
            data = session_state['data']
            if labels is not None:
                labels = pd.DataFrame.from_dict(labels).rename(columns={'labels': 'Cluster Label'})
                df_def = pd.concat([df_analyse_pca,labels],axis=1)

                # Affichage des donn√©es
                st.subheader("Aper√ßu des donn√©es lab√©lis√©es")
                with st.expander("Cliquez pour voir :"):
                    st.write(df_def)

                # Description statistique du DataFrame
                st.subheader("Description statistique")
                with st.expander("Cliquez pour voir :"):
                    st.write(df_def.describe())

                # Visualisation des clusters
                st.subheader("Visualisation des clusters")

                # S√©lection des num√©ros de clusters
                cluster_numbers = sorted(labels['Cluster Label'].unique())
                for i in range(len(cluster_numbers)):
                    cluster_numbers[i]+=1

                # Affichez les cases √† cocher
                cluster_numbers=st.multiselect("Selectionnez les clusters",cluster_numbers)

                with st.expander("Cliquez pour voir les graphiques :"):
                    if len(cluster_numbers) > 0:
                        # Filtrage des donn√©es pour les clusters s√©lectionn√©s
                        filtered_data = data

                        #selected_chart = st.selectbox("S√©lectionnez le type de graphique :", ["Analyses propri√©t√©s utilisateurs", "Analyses propri√©t√©s produits"])

                        #if selected_chart == "Graphique - Date de naissance par date":
            # Exemple de visualisation : Histogramme
                            #filtered_data = data
                        visualize_clusters(df_def,cluster_numbers)
                        #elif selected_chart == "Graphique - Date de naissance par date":

                        # Visualisation des clusters
                        # Test m√©thode avec les clusters choisis
                            #filtered_data = data
                            #visualize_cluster_products(df_def,cluster_numbers)
                        #visualize_clusters(filtered_data, cluster_numbers)
                    else:
                        st.write("Aucun cluster s√©lectionn√©.")
            else:
                st.warning("Veuillez lancer l'api.")

        else:
            st.warning("Veuillez charger un fichier CSV depuis la page Profil.")
        # Code pour la page Audience Recommendation ici

# Personnalisation de la mise en page
st.sidebar.markdown("---")

# Bouton Contact
if st.sidebar.button("Contact"):
    st.title("Contact")

    # Formulaire de contact
    st.subheader("Formulaire de contact")

    # Champ Nom
    naming = st.text_input("Nom Pr√©nom")

    # Champ Email
    email = st.text_input("Email")

    # Champ Message
    message = st.text_area("Message")

    # Bouton d'envoi du formulaire
    if st.button("Envoyer"):
        # Validation et traitement des donn√©es du formulaire
        if not naming or not email or not message:
            st.error("Veuillez remplir tous les champs du formulaire.")
        else:
            # Envoi du message ou traitement des donn√©es
            # (vous pouvez ajouter ici le code pour envoyer le message par e-mail ou le traiter d'une autre mani√®re)
            st.success("Votre message a √©t√© envoy√© avec succ√®s.")

    # Liens vers des r√©seaux sociaux
    st.subheader("R√©seaux sociaux")
    st.write("Suivez-nous sur git hub pour rester inform√©(e) :")
    st.write("- [GitHub_Gauthier](https://github.com/GauthierH29)")
    st.write("- [GitHub_Derhen](https://github.com/Tshelb)")
    st.write("- [GitHub_Samih](https://github.com/SamihBACHNOU)")

    # Noms des fondateurs
    st.subheader("Fondateurs")
    st.write("Les fondateurs du site sont :")
    st.write("- Gauthier HAICAULT")
    st.write("- Derhen BOURGEAIS")
    st.write("- Samih BACHNOU")
